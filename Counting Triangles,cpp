/***************************************************************************************************************************************
You are given an array of N non-negative integers, A0, A1 ,…, AN-1.Considering each array element Ai as the edge length of some 
line segment, count the number of triangles which you can form using these array values.

Notes:
You can use any value only once while forming each triangle. Order of choosing the edge lengths doesn’t matter.
Any triangle formed should have a positive area.
Return answer modulo 109 + 7.

For example,
A = [1, 1, 1, 2, 2]
Return: 4
----------------------------------------------------------------------------------------------------------------------------------------
Approach:
We sort the array and consider each element one by one from the last end for each we consider two pointers l starting at 0th and r 
starting at the index i-1. Now we will check how many elements are there which can be used to form a triangle with the A[i] always 
being an edge.We check for the condition that using A[l], A[r] and A[i] we can form the triangle or not, if we can then no need to
check for others intermediate values as array is sorted(we add (l-r) to the count this count is added by fixed A[i], A[l] and rest
values in-between these two).We reduce the right value r for more possibility otherwise we increase the l for higher values.
***************************************************************************************************************************************/


int Solution::nTriang(vector<int> &A) {
    int n = A.size(), count = 0;
    int MOD = pow(10, 9) + 7;
    sort(A.begin(), A.end());
    for(int i = n - 1; i>=1; i--) {
        int l = 0, r = i-1;
        while(l<r) {
            if(A[l]+A[r]>A[i]) {
                count = (count+(r-l)%MOD)%MOD;
                r--;
            }   
            else
                l++;    
            
        }
    }
    return count;
}
